syntax = "proto3";

// Echo Service
//
// Echo Service API consists of a single service which returns
// a message.
package eos.echo.service;

import "proto/go/google/api/annotations.proto";
import "Access.proto";
import "Acl.proto";
import "Attr.proto";
import "ConsoleReply.proto";

option go_package = "eos.echo.service";

// SimpleMessage represents a simple message sent to the Echo service.
message SimpleMessage {
	// Id represents the message identifier.
	string id = 1;
	int64 num = 2;
}

// Echo service responds to incoming echo requests.
service EchoService {
	// Echo method receives a simple message and returns it.
	//
	// The message posted as the id parameter will also be
	// returned.
	rpc Echo(SimpleMessage) returns (SimpleMessage) {
		option (google.api.http) = {
			post: "/v1/example/echo/{id}"
			additional_bindings {
				get: "/v1/example/echo/{id}/{num}"
			}
		};
	}

	// EchoBody method receives a simple message and returns it.
	rpc EchoBody(SimpleMessage) returns (SimpleMessage) {
		option (google.api.http) = {
			post: "/v1/example/echo_body"
			body: "*"
		};
	}

	// AclRequest method receives a request for an eos acl command
	// and returns the result of the command
	rpc AclRequest(eos.console.AclProto) returns (eos.console.ReplyProto) {
		option (google.api.http) = {
			post: "/v1/example/acl_cmd"
			body: "*"
		};
	}

	// AccessRequest method receives a request for an eos access command
	// and returns the result of the command
	rpc AccessRequest(eos.console.AccessProto) returns (eos.console.ReplyProto) {
		option (google.api.http) = {
			post: "/v1/example/access_cmd"
			body: "*"
		};
	}

	// AttrRequest method receives a request for an eos command
	// and returns the result of the command
	rpc AttrRequest(eos.console.AttrProto) returns (eos.console.ReplyProto) {
		option (google.api.http) = {
			post: "/v1/example/attr_cmd"
			body: "*"
		};
	}
}
