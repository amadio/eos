#!/bin/bash
set -x


# ******************************************************************************
# EOS - the CERN Disk Storage System
# Copyright (C) 2022 CERN/Switzerland
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# ******************************************************************************

#------------------------------------------------------------------------------
# Description: Script testing the balancer mechanism of EOS. It assumes that
#              there are at least 7 FSTs available in the instance.
#
# Usage:
# eos-balancer-test <eos_mgm_hostname>
#------------------------------------------------------------------------------

# Helper cleanup method
cleanup() {
  eos rm -rF "${EOS_BALANCE_TEST}/replica/*"
  eos rm -rF "${EOS_BALANCE_TEST}/raiddp/*"
  eos rm -rF "${EOS_BALANCE_TEST}/rain/*"
  eos rmdir "${EOS_BALANCE_TEST}/replica/"
  eos rmdir "${EOS_BALANCE_TEST}/raiddp/"
  eos rmdir "${EOS_BALANCE_TEST}/rain/"
  eos rmdir "${EOS_BALANCE_TEST}/"
  rm -rf ${TEST_FN1} ${TEST_FN2}
}

if [[ $# -eq 0 || $# -gt 2 ]]; then
      echo "Usage: $0 <eos_mgm_hostname>"
      exit 1
fi

EOS_MGM_HOSTNAME=$1
EOS_BALANCER_THRESHOLD=5

# Check preconditions and make sure central balancer is enabled
FST_ONLINE=$(eos fs ls | grep "online" | wc -l)

if [[ ${FST_ONLINE} -lt 7 ]]; then
  echo "error: not enough FSTs configured"
  exit 1
fi

HAS_CENTRAL_BALANCER=$(ps aux | grep [x]rootd | grep mgm | awk '{print "sudo grep EOS_USE_CENTRAL_BALANCER /proc/"$2"/environ > /dev/null";}' | sh -x)


if [[ $HAS_CENTRAL_BALANCER -ne 0 ]]; then
  echo "error: central balancer is not enabled"
  exit 1
fi

# Create dummy test files
TEST_FN1=/var/tmp/1GB.dat
TEST_FN2=/var/tmp/2GB.dat

dd if=/dev/urandom of=${TEST_FN1} bs=1M count=1024 &> /dev/null
dd if=/dev/urandom of=${TEST_FN2} bs=1M count=2048  &> /dev/null

# Create eos directory for tests
EOS_BALANCE_DIR=/eos/dockertest/balance_test
eos mkdir -p ${EOS_BALANCE_DIR}/replica/
eos mkdir -p ${EOS_BALANCE_DIR}/raiddp/
eos mkdir -p ${EOS_BALANCE_DIR}/rain/
eos chmod -r 2777 ${EOS_BALANCE_DIR}/
eos attr set default=replica ${EOS_BALANCE_DIR}/replica/
eos attr set default=raiddp ${EOS_BALANCE_DIR}/raiddp/
eos attr set default=raid6 ${EOS_BALANCE_DIR}/rain/

# Put one file system in RO mode while we copy data in so that we end up
# with an unbalanced group
eos fs config 1 configstatus=ro

xrdcp -f --nopbar ${TEST_FN1} root://${EOS_MGM_HOSTNAME}/${EOS_BALANCE_TEST}/replica/1GB_file${i}.dat
xrdcp -f --nopbar ${TEST_FN1} root://${EOS_MGM_HOSTNAME}/${EOS_BALANCE_TEST}/raiddp/1GB_file${i}.dat
xrdcp -f --nopbar ${TEST_FN1} root://${EOS_MGM_HOSTNAME}/${EOS_BALANCE_TEST}/rain/1GB_file${i}.dat
xrdcp -f --nopbar ${TEST_FN2} root://${EOS_MGM_HOSTNAME}/${EOS_BALANCE_TEST}/replica/2GB_file${i}.dat
xrdcp -f --nopbar ${TEST_FN2} root://${EOS_MGM_HOSTNAME}/${EOS_BALANCE_TEST}/raiddp/2GB_file${i}.dat
xrdcp -f --nopbar ${TEST_FN2} root://${EOS_MGM_HOSTNAME}/${EOS_BALANCE_TEST}/rain/2GB_file${i}.dat

eos fs config 1 configstatus=rw
eos fs ls --io
eos fs ls

# Enable the balancing at the space level
eos space config default space.balancer.threshold=${EOS_BALANCER_THRESHOLD}
eos space config default space.balancer=on

# Get current dev of the group
START_DEV=$(sudo eos group ls -m | grep "default.0" | awk '{print $20;}' | cut -d '=' -f2)

if [[ ${START_DEV} -lt ${EOS_BALANCER_THRESHOLD} ]]; then
   echo "error: start deviation is already less then threshold"
   cleanup
   exit 1
fi

local MAX_DELAY=300 # seconds
local START_TIME=$(date +%s)

while
  local CURRENT_TIME=${date +%s)
  local NEW_DEV=$(sudo eos group ls -m | grep "default.0" | awk '{print $20;}' | cut -d '=' -f2)

  if [[ ${NEW_DEV} -lt ${EOS_BALANCER_THRESHOLD} ]]; then
    echo "info: new deviation value is ${NEW_DEV}"
    false # exit the whlie loop
  else
    if (( $((${CURRENT_TIME} - ${START_TIME})) >= ${MAX_DELAY} )); then
      echo "error: balancing was not done within ${MAX_DELAY} seconds"
      cleanup
      exit 1
    else
      echo "info: sleep for 5 seconds, `secs_to_human $((${CURRENT_TIME} - ${START_TIME}))` passed"
      sleep 5
      eos fs ls --io
  fi
do
:
done


cleanup
exit 0
