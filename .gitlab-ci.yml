stages:
  - build:rpm
  - build:dockerimage
  - test
  - publish
  - clean

before_script:
  - source gitlab-ci/export_branch.sh
  - echo "Exporting BRANCH=${BRANCH}"

eos_rpm_cc7:
  stage: build:rpm
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y gcc-c++ cmake3 make rpm-build which git yum-plugin-priorities ccache epel-release
    - git submodule update --init --recursive
    - mkdir build
    - cd build
    - cmake3 .. -DPACKAGEONLY=1
    - make srpm
    - cd ..
    - echo -e '[eos-depend]\nname=EOS dependencies\nbaseurl=http://storage-ci.web.cern.ch/storage-ci/eos/'${BRANCH}'-depend/el-7/x86_64/\ngpgcheck=0\nenabled=1\nexclude=xrootd*\npriority=4\n' >> /etc/yum.repos.d/eos-depend.repo
    - echo -e '\n[kio]\nname=kio\nbaseurl=https://dss-ci-repo.web.cern.ch/dss-ci-repo/kinetic/kineticio/el-7-x86_64\nenabled=1\n' >> /etc/yum.repos.d/eos-depend.repo
    - yum-builddep --nogpgcheck --setopt=cern*.exclude=xrootd* -y build/SRPMS/*
    - if [[ $CI_COMMIT_TAG ]]; then BUILD_TYPE=tag; else BUILD_TYPE=commit; fi
    - if [ "$BUILD_TYPE" == "commit" ]; then source gitlab-ci/setup_ccache.sh; else export CCACHE_DISABLE=1; fi
    - rpmbuild --rebuild --with=server --define "_rpmdir build/RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" build/SRPMS/*
    - ccache -s
    - mkdir cc7_artifacts
    - cp -R build/SRPMS cc7_artifacts
    - cp -R build/RPMS cc7_artifacts
    - git clone https://gitlab.cern.ch/eos/eos-docker.git
    - echo -e '[eos-depend]\nname=EOS dependencies \nbaseurl=http://storage-ci.web.cern.ch/storage-ci/eos/'${BRANCH}'-depend/el-7/x86_64/\ngpgcheck=0\nenabled=1\npriority=1\n' > eos-docker/eos.repo
  cache:
    key: "$CI_JOB_NAME/$CI_COMMIT_REF_NAME"
    paths:
    - ccache/
  artifacts:
    expire_in: 1 day
    paths:
    - cc7_artifacts/
    - eos-docker/
  tags:
    - docker-cc7

eos_rpm_slc6:
  stage: build:rpm
  image: gitlab-registry.cern.ch/linuxsupport/slc6-base
  script:
    - yum install --nogpg -y gcc-c++ cmake3 make rpm-build which git yum-plugin-priorities tar ccache
    - git submodule update --init --recursive
    - mkdir build
    - cd build
    - cmake3 .. -DPACKAGEONLY=1
    - make srpm
    - cd ..
    - echo -e '[eos-depend]\nname=EOS dependencies\nbaseurl=http://storage-ci.web.cern.ch/storage-ci/eos/'${BRANCH}'-depend/el-6/x86_64/\ngpgcheck=0\nenabled=1\nexclude=xrootd*\npriority=4\n' >> /etc/yum.repos.d/eos-depend.repo
    # TODO: this repository needs to be removed in the future
    - echo -e '\n[kio]\nname=kio\nbaseurl=https://dss-ci-repo.web.cern.ch/dss-ci-repo/kinetic/kineticio/el-6-x86_64\nenabled=1\n' >> /etc/yum.repos.d/eos-depend.repo
    - yum-builddep --nogpgcheck --setopt=cern*.exclude=xrootd* -y build/SRPMS/*
    - if [[ $CI_COMMIT_TAG ]]; then BUILD_TYPE=tag; else BUILD_TYPE=commit; fi
    - if [ "$BUILD_TYPE" == "commit" ]; then source gitlab-ci/setup_ccache_slc6.sh; ccache --max-size=1.5G; else export CCACHE_DISABLE=1; fi
    - rpmbuild --rebuild --with server --define "_rpmdir build/RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" build/SRPMS/*
    - ccache -s
    - mkdir slc6_artifacts
    - cp -R build/SRPMS slc6_artifacts
    - cp -R build/RPMS slc6_artifacts
  cache:
    key: "$CI_JOB_NAME/$CI_COMMIT_REF_NAME"
    paths:
    - ccache/
  artifacts:
    expire_in: 1 day
    paths:
    - slc6_artifacts/
  tags:
    - docker-slc6

eos_rpm_fedora_rawhide:
  stage: build:rpm
  image: fedora:rawhide
  script:
    - dnf install --nogpg -y gcc-c++ cmake3 make rpm-build which git yum-plugin-priorities tar dnf-plugins-core ccache https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
    - git submodule update --init --recursive
    - mkdir build
    - cd build
    - cmake3 .. -DPACKAGEONLY=1
    - make srpm
    - cd ..
    - echo -e '[eos-depend]\nname=EOS dependencies\nbaseurl=http://storage-ci.web.cern.ch/storage-ci/eos/'${BRANCH}'-depend/fc-rawhide/x86_64/\ngpgcheck=0\nenabled=1\nexclude=xrootd*\npriority=4\n' >> /etc/yum.repos.d/eos-depend.repo
    - dnf builddep --nogpgcheck -y build/SRPMS/*
    - if [[ $CI_COMMIT_TAG ]]; then BUILD_TYPE=tag; else BUILD_TYPE=commit; fi
    - if [ "$BUILD_TYPE" == "commit" ]; then source gitlab-ci/setup_ccache_fc.sh; else export CCACHE_DISABLE=1; fi
    - rpmbuild --rebuild --with server --define "_rpmdir build/RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" build/SRPMS/*
    - ccache -s
    - mkdir fcrawhide_artifacts
    - cp -R build/SRPMS fcrawhide_artifacts
    - cp -R build/RPMS fcrawhide_artifacts
  cache:
    key: "$CI_JOB_NAME/$CI_COMMIT_REF_NAME"
    paths:
    - ccache/
  artifacts:
    expire_in: 1 day
    paths:
    - fcrawhide_artifacts/
  tags:
    - docker-fc_rawhide
  allow_failure: true

eos_rpm_fedora_26:
  stage: build:rpm
  image: fedora:26
  script:
    - dnf install --nogpg -y gcc-c++ cmake3 make rpm-build which git yum-plugin-priorities tar dnf-plugins-core ccache https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
    - git submodule update --init --recursive
    - mkdir build
    - cd build
    - cmake3 .. -DPACKAGEONLY=1
    - make srpm
    - cd ..
    - echo -e '[eos-depend]\nname=EOS dependencies\nbaseurl=http://storage-ci.web.cern.ch/storage-ci/eos/'${BRANCH}'-depend/fc-26/x86_64/\ngpgcheck=0\nenabled=1\nexclude=xrootd*\npriority=4\n' >> /etc/yum.repos.d/eos-depend.repo
    - dnf builddep --nogpgcheck -y build/SRPMS/*
    - if [[ $CI_COMMIT_TAG ]]; then BUILD_TYPE=tag; else BUILD_TYPE=commit; fi
    - if [ "$BUILD_TYPE" == "commit" ]; then source gitlab-ci/setup_ccache_fc.sh; else export CCACHE_DISABLE=1; fi
    - rpmbuild --rebuild --with server --define "_rpmdir build/RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" build/SRPMS/*
    - ccache -s
    - mkdir fcold_artifacts
    - cp -R build/SRPMS fcold_artifacts
    - cp -R build/RPMS fcold_artifacts
  cache:
    key: "$CI_JOB_NAME/$CI_COMMIT_REF_NAME"
    paths:
    - ccache/
  artifacts:
    expire_in: 1 day
    paths:
    - fcold_artifacts/
  tags:
    - docker-fc25
  allow_failure: true

eos_deb_ubuntu_artful:
  stage: build:rpm
  image: ubuntu:artful
  script:
    - apt-get update
    - apt-get install -y git cmake g++ debhelper devscripts equivs gdebi-core ccache
    - echo -e '\ndeb http://storage-ci.web.cern.ch/storage-ci/debian/xrootd/ artful release' >> /etc/apt/sources.list
    - curl -sL http://storage-ci.web.cern.ch/storage-ci/storageci.key | apt-key add -
    - apt-get update
    - git submodule update --init --recursive
    - mk-build-deps --build-dep debian/control
    - gdebi -n eos-build-deps-depends*.deb
    - dch --create -v `./genversion.sh` --package eos --urgency low --distribution artful -M "This package is built and released automatically. For important notices and releases subscribe to our maling lists or visit our website."
    - if [[ $CI_COMMIT_TAG ]]; then export CCACHE_DISABLE=1; else source gitlab-ci/setup_ccache_deb.sh; fi
    - dpkg-buildpackage -b -us -uc -tc --buildinfo-option="-udeb_packages" --changes-option="-udeb_packages"
    - ccache -s
    - mkdir artful
    - cp deb_packages/*.deb artful
  cache:
    key: "$CI_JOB_NAME/$CI_COMMIT_REF_NAME"
    paths:
    - ccache/
  artifacts:
    expire_in: 1 day
    paths:
    - artful/
  tags:
    - docker-ubuntu
  allow_failure: true

eos_dmg_macosx:
  stage: build:rpm
  script:
    - git submodule update --init --recursive
    - mkdir build
    - mkdir install
    - cd build
    - /Users/jenkins/workspace/cmake-3.5.2/install/bin/cmake -DCLIENT=1 -DCMAKE_INSTALL_PREFIX=/usr/local -D Z_ROOT_DIR=/usr/local/opt/zlib/ -D OPENSSL_ROOT_DIR=/usr/local/opt/openssl/ -D NCURSES_ROOT_DIR=/usr/local/opt/ncurses/ -D ZMQ_ROOT_DIR=/usr/local/opt/zeromq/ -D XROOTD_ROOT_DIR=/usr/local/opt/xrootd/ ..
    - make -j 4
    - make install DESTDIR=../install/
    - version=`../genversion.sh`
    - ../utils/eos-osx-package.sh $version ../install/
    - ccache -s
    - cd ..
    - mkdir osx_artifacts
    - cp build/*.dmg osx_artifacts
  artifacts:
    expire_in: 1 day
    paths:
    - osx_artifacts/
  tags:
    - macosx-shell
  allow_failure: true

eos_nginx_cc7:
  stage: build:rpm
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y gcc-c++ cmake3 make rpm-build which git sssd-client sudo createrepo
    - cd nginx
    - ./makesrpm.sh
    - yum-builddep --nogpgcheck -y *.src.rpm
    - mkdir RPMS
    - rpmbuild --rebuild --define "_rpmdir RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" *.src.rpm
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${BRANCH}-depend/el-7/x86_64
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f RPMS/*.rpm $STORAGE_PATH
    - sudo -u stci -H createrepo --update -q $STORAGE_PATH
  tags:
    - docker-cc7
  when: manual
  environment:
    name: nginx-cc7-prod

eos_nginx_slc6:
  stage: build:rpm
  image: gitlab-registry.cern.ch/linuxsupport/slc6-base
  script:
    - yum install --nogpg -y gcc-c++ cmake3 make rpm-build which git tar sssd-client sudo createrepo
    - cd nginx
    - ./makesrpm.sh
    - yum-builddep --nogpgcheck -y *.src.rpm
    - mkdir RPMS
    - rpmbuild --rebuild --define "_rpmdir RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" *.src.rpm
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${BRANCH}-depend/el-6/x86_64
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f RPMS/*.rpm $STORAGE_PATH
    - sudo -u stci -H createrepo --update -q $STORAGE_PATH
  tags:
    - docker-slc6
  when: manual
  environment:
    name: nginx-slc6-prod

eos_apmon_cc7:
  stage: build:rpm
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y gcc-c++ cmake3 make rpm-build which git sssd-client sudo createrepo
    - cd ApMon
    - ./maketar.sh
    - rpmbuild --define "_source_filedigest_algorithm md5" --define "_binary_filedigest_algorithm md5" --define "_topdir ./rpmbuild" -ts eos-apmon-*.tar.gz
    - yum-builddep --nogpgcheck -y rpmbuild/SRPMS/eos-apmon-*.src.rpm
    - rpmbuild --rebuild --define "_rpmdir rpmbuild/RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" rpmbuild/SRPMS/eos-apmon-*.src.rpm
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${BRANCH}-depend/el-7/x86_64
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f rpmbuild/RPMS/*.rpm $STORAGE_PATH
    - sudo -u stci -H createrepo --update -q $STORAGE_PATH
  tags:
    - docker-cc7
  when: manual
  environment:
    name: apmon-cc7-prod
    
eos_docs:
  stage: build:rpm
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y make python-sphinx sssd-client sudo
    - cd doc
    - export PYTHONPATH=`pwd`/_themes/
    - make html
    - sudo -u stci -H bash -c "rm -rf /eos/project/e/eos/www/docs/*"
    - sudo -u stci -H cp -R _build/html/* /eos/project/e/eos/www/docs/
  tags:
    - docker-cc7
  when: manual

eos_dockerimage_commit:
  stage: build:dockerimage
  tags:
    - docker-image-build
  script:
    - ""
  variables:
    TO: gitlab-registry.cern.ch/dss/eos:${CI_PIPELINE_ID}
    DOCKER_FILE: eos-docker/Dockerfile
  dependencies:
    - eos_rpm_cc7
  only:
    - branches

eos_dockerimage_tag:
  stage: build:dockerimage
  tags:
    - docker-image-build
  script:
    - ""
  variables:
    TO: gitlab-registry.cern.ch/dss/eos:${CI_COMMIT_TAG}
    DOCKER_FILE: eos-docker/Dockerfile
  dependencies:
    - eos_rpm_cc7
  only:
    - tags

eos_unit_test:
  stage: test
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y gcc-c++ cmake3 make rpm-build which git yum-plugin-priorities ccache epel-release cppunit-devel
    - git submodule update --init --recursive
    - mkdir build
    - cd build
    - cmake3 .. -DPACKAGEONLY=1
    - make srpm
    - cd ..
    - source gitlab-ci/export_buildtype.sh 24 build/SRPMS
    - if [ "$BUILD_TYPE" == "commit" ]; then source gitlab-ci/setup_ccache.sh; else export CCACHE_DISABLE=1; fi
    - echo -e '[eos-depend]\nname=EOS dependencies\nbaseurl=http://storage-ci.web.cern.ch/storage-ci/eos/'${BRANCH}'-depend/el-7/x86_64/\ngpgcheck=0\nenabled=1\nexclude=xrootd*\npriority=4\n' >> /etc/yum.repos.d/eos-depend.repo
    - echo -e '\n[kio]\nname=kio\nbaseurl=https://dss-ci-repo.web.cern.ch/dss-ci-repo/kinetic/kineticio/el-7-x86_64\nenabled=1\n' >> /etc/yum.repos.d/eos-depend.repo
    - yum-builddep --nogpgcheck -y build/SRPMS/*
    - rm -rf build
    - mkdir build
    - cd build
    - cmake3 .. -DBUILD_TESTS=1
    - make eos-unit-tests -j 4
    - ccache -s
    - ./unit_tests/eos-unit-tests
  cache:
    key: "$CI_BUILD_NAME/$CI_BUILD_REF_NAME"
    paths:
    - ccache/
  tags:
    - docker-cc7

eos_system_test:
  stage: test
  script:
    - sudo ./eos-docker/scripts/shutdown_services.sh
    - ./eos-docker/scripts/remove_unused_images.sh
    - docker pull gitlab-registry.cern.ch/dss/eos:${CI_COMMIT_TAG-$CI_PIPELINE_ID}
    - sudo ./eos-docker/scripts/start_services.sh -i gitlab-registry.cern.ch/dss/eos:${CI_COMMIT_TAG-$CI_PIPELINE_ID}
    - docker exec -i eos-mgm-test eos chmod 2777 /eos/dockertest
    - docker exec -i eos-mgm-test eos vid enable krb5
    - docker exec -i eos-client-test git clone https://gitlab.cern.ch/dss/eosclient-tests.git
    - docker exec -i eos-client-test env EOS_MGM_URL=root://eos-mgm-test.eoscluster.cern.ch eos fuse mount /eos_fuse
    - docker exec -i eos-client-test python /eosclient-tests/microtests/run-ci.py --eosdir /eos_fuse/dockertest
    - docker exec -i eos-client-test mkdir /eos/
    - docker exec -di eos-client-test mount -t fuse eosxd /eos/
    - docker exec -i -u eos-user eos-client-test python /eosclient-tests/microtests/run-ci.py --eosdir /eos/dockertest
    - docker exec -i eos-mgm-test eos -b space quota default on
    - docker exec -i eos-mgm-test eos-instance-test-ci
    - sudo ./eos-docker/scripts/shutdown_services.sh
  tags:
    - shell-with-docker
  dependencies:
    - eos_rpm_cc7
    
eos_system_test_with_quarkdb:
  stage: test
  script:
    - sudo ./eos-docker/scripts/shutdown_services.sh
    - ./eos-docker/scripts/remove_unused_images.sh
    - docker pull gitlab-registry.cern.ch/dss/eos:${CI_COMMIT_TAG-$CI_PIPELINE_ID}
    - sudo ./eos-docker/scripts/start_services.sh -i gitlab-registry.cern.ch/dss/eos:${CI_COMMIT_TAG-$CI_PIPELINE_ID} -q
    - docker exec -i eos-mgm-test eos chmod 2777 /eos/dockertest
    - docker exec -i eos-mgm-test eos -b space quota default on
    - docker exec -i eos-client-test git clone https://gitlab.cern.ch/dss/eosclient-tests.git
    - docker exec -i eos-client-test env EOS_MGM_URL=root://eos-mgm-test.eoscluster.cern.ch eos fuse mount /eos_fuse
    - docker exec -i eos-client-test python /eosclient-tests/microtests/run-ci.py --eosdir /eos_fuse/dockertest
    - docker exec -i eos-mgm-test eos-instance-test-ci
    - sudo ./eos-docker/scripts/shutdown_services.sh
  tags:
    - xrootd-shell
  dependencies:
    - eos_rpm_cc7
  when: manual

eos_stress_test:
  stage: test
  script:
    - sudo ./eos-docker/scripts/shutdown_services.sh
    - ./eos-docker/scripts/remove_unused_images.sh
    - docker pull gitlab-registry.cern.ch/dss/eos:${CI_COMMIT_TAG-$CI_PIPELINE_ID}
    - sudo ./eos-docker/scripts/start_services.sh -i gitlab-registry.cern.ch/dss/eos:${CI_COMMIT_TAG-$CI_PIPELINE_ID}
    - docker exec -i eos-mgm-test eos chmod 2777 /eos/dockertest
    - docker exec -i eos-mgm-test hammer-runner.py --strict-exit-code 1 --gitlab --url eos-mgm-test.eoscluster.cern.ch//eos/dockertest/hammer/ --protocols xroot --threads 1 2 10 100 --operations write stat read delete --runs 3 --nfiles 10000
    - sudo ./eos-docker/scripts/shutdown_services.sh
  tags:
    - eos-stress
  dependencies:
    - eos_rpm_cc7
  allow_failure: true
  retry: 1
  
eos_publish_artifacts:
  stage: publish
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y sssd-client sudo createrepo
    - echo "Publishing `find cc7_artifacts -name 'eos-*.src.rpm' -print0`"
    - if [[ $CI_COMMIT_TAG ]]; then BUILD_TYPE=tag; else BUILD_TYPE=commit; fi
    - if [ "$BUILD_TYPE" == "tag" ]; then ./gitlab-ci/store_artifacts.sh ${BRANCH} ${BUILD_TYPE} /mnt/eos_repositories/eos; fi
    - sudo -u stci -H ./gitlab-ci/store_artifacts.sh ${BRANCH} ${BUILD_TYPE} /eos/project/s/storage-ci/www/eos
  tags:
    - docker-cc7
  only:
    - master
    - tags

eos_publish_debian_artifacts:
  stage: publish
  image: ubuntu:artful
  script:
    - apt-get update
    - apt-get install -y sudo apt-utils sssd
    - mkdir /home/stci
    - chown -R stci:def-cg /home/stci
    - chmod -R 700 /home/stci
    - sudo -u stci -H gpg --homedir /home/stci/ --allow-secret-key-import --import /keys/stci-debian-repo.sec
    - if [[ $CI_COMMIT_TAG ]]; then BUILD_TYPE=tag; else BUILD_TYPE=commit; fi
    - sudo -u stci -H ./gitlab-ci/store_artifacts_debian.sh /eos/project/s/storage-ci/www/debian/eos/${BRANCH} ${BUILD_TYPE}
  tags:
    - docker-ubuntu
  dependencies:
    - eos_deb_ubuntu_artful
  allow_failure: true
  only:
    - master
    - tags

eos_publish_debian_artifacts_volume:
  stage: publish
  image: ubuntu:artful
  script:
    - apt-get update
    - apt-get install -y sudo apt-utils sssd
    - mkdir /home/stci
    - gpg --homedir /home/stci/ --allow-secret-key-import --import /keys/stci-debian-repo.sec
    - ./gitlab-ci/store_artifacts_debian.sh /mnt/eos_repositories/debian/eos/${BRANCH} tag
  tags:
    - docker-cc7
  dependencies:
    - eos_deb_ubuntu_artful
  only:
    - tags

eos_clean_artifacts:
  stage: clean
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y sssd-client sudo createrepo
    - sudo -u stci -H ./gitlab-ci/remove_old_artifacts.sh
  tags:
    - docker-cc7
  allow_failure: true
  only:
    - triggers
    - schedules

eos_clean_debian_artifacts:
  stage: clean
  image: ubuntu:artful
  script:
    - apt-get update
    - apt-get install -y sudo apt-utils sssd
    - mkdir /home/stci
    - chown -R stci:def-cg /home/stci
    - chmod -R 700 /home/stci
    - sudo -u stci -H gpg --homedir /home/stci/ --allow-secret-key-import --import /keys/stci-debian-repo.sec
    - sudo -u stci -H ./gitlab-ci/remove_old_artifacts_debian.sh
  tags:
    - docker-ubuntu
  allow_failure: true
  only:
    - triggers
    - schedules

eos_periodic_coverity:
  stage: build:rpm
  script:
    - git submodule update --init --recursive
    - mkdir build
    - cd build
    - cmake3 .. -DPACKAGEONLY=1
    - make srpm
    - sudo yum-builddep --nogpgcheck -y SRPMS/*
    - rm -f CMakeCache.txt
    - cmake3 ..
    - cov-build --dir cov-int make -j 4
    - tar czvf eos-metrics.tgz cov-int
    - curl --form token="`cat /home/gitlab-runner/.coverity_token`" --form email=project-eos-commits@cern.ch --form file=@eos-metrics.tgz --form version="`../genversion.sh`" --form description="Periodic Gitlab build" https://scan.coverity.com/builds?project=cern-eos%2Feos
  tags:
    - coverity
  allow_failure: true
  only:
    - triggers
    - schedules

eos_cppcheck_sonar:
  stage: build:rpm
  script:
    - cppcheck -v --enable=all --inline-suppr --xml --xml-version=1 -i common/fmt -i fst/layout/gf-complete -i fst/layout/jerasure -i common/sqlite -i namespace/ns_quarkdb/qclient common/ fst/ mgm/ console/ fuse/ namespace/ mq/ 2> cppcheck-report.xml
    - sonar-scanner -Dsonar.host.url=http://sonar.cern.ch -Dsonar.cxx.cppcheck.reportPath=cppcheck-report.xml  -Dsonar.projectKey=eos:eos -Dsonar.projectName=eos -Dsonar.projectVersion="`./genversion.sh`" -Dsonar.sources=common/,fst/,mgm/,console/,fuse/,namespace/,mq/
  tags:
    - coverity
  allow_failure: true
  only:
    - master
    - tags
