//------------------------------------------------------------------------------
//! @file data.cc
//! @author Andreas-Joachim Peters CERN
//! @brief meta data handling class
//------------------------------------------------------------------------------

/************************************************************************
 * EOS - the CERN Disk Storage System                                   *
 * Copyright (C) 2016 CERN/Switzerland                                  *
 *                                                                      *
 * This program is free software: you can redistribute it and/or modify *
 * it under the terms of the GNU General Public License as published by *
 * the Free Software Foundation, either version 3 of the License, or    *
 * (at your option) any later version.                                  *
 *                                                                      *
 * This program is distributed in the hope that it will be useful,      *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of       *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        *
 * GNU General Public License for more details.                         *
 *                                                                      *
 * You should have received a copy of the GNU General Public License    *
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.*
 ************************************************************************/

#include "data/data.hh"
#include "kv/kv.hh"
#include "misc/MacOSXHelper.hh"
#include "common/Logging.hh"
#include <iostream>
#include <sstream>

/* -------------------------------------------------------------------------- */
data::data()
/* -------------------------------------------------------------------------- */
{

}

/* -------------------------------------------------------------------------- */
data::~data()
/* -------------------------------------------------------------------------- */
{

}

/* -------------------------------------------------------------------------- */
void
/* -------------------------------------------------------------------------- */
data::init()
/* -------------------------------------------------------------------------- */
{

}

/* -------------------------------------------------------------------------- */
data::shared_data
/* -------------------------------------------------------------------------- */
data::get(fuse_req_t req,
          fuse_ino_t ino)
/* -------------------------------------------------------------------------- */
{
  XrdSysMutexHelper mLock(datamap);
  if (datamap.count(ino))
  {
    shared_data io = datamap[ino];
    return io;
  }
  else
  {
    std::string mdstream;
    shared_data io = std::make_shared<datax>();
    io->set_id(ino, req);
    datamap[io->id()] = io;
    return io;
  }
}

/* -------------------------------------------------------------------------- */
void
/* -------------------------------------------------------------------------- */
data::unlink(fuse_req_t req, fuse_ino_t ino)
/* -------------------------------------------------------------------------- */
{
  XrdSysMutexHelper mLock(datamap);
  if (datamap.count(ino))
  {
    datamap[ino]->unlink();
    datamap.erase(ino);
    eos_static_info("datacache::unlink size=%lu", datamap.size());
  }
  else
  {
    shared_data io = std::make_shared<datax>();
    io->set_id(ino, req);
    io->unlink();
  }
}

/* -------------------------------------------------------------------------- */
void
/* -------------------------------------------------------------------------- */
data::datax::flush()
/* -------------------------------------------------------------------------- */
{
}

/* -------------------------------------------------------------------------- */
int 
/* -------------------------------------------------------------------------- */
data::datax::attach()
/* -------------------------------------------------------------------------- */
{
  return mFile->file()->attach();
}

/* -------------------------------------------------------------------------- */
int 
data::datax::detach()
/* -------------------------------------------------------------------------- */
{
  return mFile->file()->detach();
}

/* -------------------------------------------------------------------------- */
int 
/* -------------------------------------------------------------------------- */
data::datax::unlink()
/* -------------------------------------------------------------------------- */
{
  cachehandler::rm(mIno);
  return mFile->file()->unlink();
}

// IO bridge interface

/* -------------------------------------------------------------------------- */
ssize_t 
/* -------------------------------------------------------------------------- */
data::datax::pread(void *buf, size_t count, off_t offset)
/* -------------------------------------------------------------------------- */
{
  return mFile->file()->pread(buf, count, offset);
}

/* -------------------------------------------------------------------------- */
ssize_t
/* -------------------------------------------------------------------------- */
data::datax::pwrite(const void *buf, size_t count, off_t offset)
/* -------------------------------------------------------------------------- */
{
  return mFile->file()->pwrite(buf, count, offset);
}

/* -------------------------------------------------------------------------- */
ssize_t 
/* -------------------------------------------------------------------------- */
data::datax::peek_pread(char* &buf, size_t count, off_t offset)
/* -------------------------------------------------------------------------- */
{
  return mFile->file()->peek_read(buf, count, offset);
}

/* -------------------------------------------------------------------------- */
void 
/* -------------------------------------------------------------------------- */
data::datax::release_pread()
/* -------------------------------------------------------------------------- */
{
  return mFile->file()->release_read();
}

/* -------------------------------------------------------------------------- */
int 
/* -------------------------------------------------------------------------- */
data::datax::truncate(off_t offset)
/* -------------------------------------------------------------------------- */
{
  return mFile->file()->truncate(offset);
}

/* -------------------------------------------------------------------------- */
int
/* -------------------------------------------------------------------------- */
data::datax::sync()
/* -------------------------------------------------------------------------- */
{
  return mFile->file()->sync();
}

/* -------------------------------------------------------------------------- */
size_t 
/* -------------------------------------------------------------------------- */
data::datax::size()
/* -------------------------------------------------------------------------- */
{
  return mFile->file()->size();
}